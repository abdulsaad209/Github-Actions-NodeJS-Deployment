name: Deploying Solar System Application

env:
  MONGO_URI: ${{ secrets.MONGO_URI_SECRET }}

on:
  workflow_dispatch: 
  push:
    branches:
      - main
jobs:
  unit_testing:
    runs-on: self-hosted
    container:  # Run job inside the container
      image: node:18-alpine3.14
    services:
      mongodb: # label
        image: saadzahid/solarsystem-mongodb-test:01 # Using test db container instead of prod db
        options:
          --name mongo # assigning container name so that i can use this in MONGO_URI to connect to db
    env:
      MONGO_URI: mongodb://test-user:test-user-1@mongo:27017/solar_system
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # - name: Choose NodeJS Action
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18
      
      - name: Cache the Dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        
      - name: Install Dependencies 
        run: npm install

      - name: Test Code
        run: npm test

      - name: Storing Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Results
          path: test-results.xml
          retention-days: 1

  code_coverage:
    continue-on-error: true
    runs-on: self-hosted
    needs: unit_testing
    container:  # Run job inside the container
      image: node:18-alpine3.14
    services:
      mongodb: # label
        image: saadzahid/solarsystem-mongodb-test:01 # Using test db container instead of prod db
        options:
          --name mongo # assigning container name so that i can use this in MONGO_URI to connect to db
    env:
      MONGO_URI: mongodb://test-user:test-user-1@mongo:27017/solar_system
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # - name: Choose NodeJS Action
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      - name: Cache the Dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
      
      - name: Installing Dependencies
        run: npm install
      
      - name: Run Code Coverage 
        run: npm run coverage

      - name: Storing Artifacts
        if: always()  #job will run if previous job fails or pass
        uses: actions/upload-artifact@v4
        with:
          name: Storing Code Coverage Artifacts
          path: coverage/cobertura-coverage.xml
          retention-days: 1
      
  containerization:
    name: Containerize and Push to Registry
    runs-on: self-hosted
    needs: [unit_testing,code_coverage]
    permissions:
      packages: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: GHCR (Github container registry) Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # inbuilt variable take github username
          #password: ${{ secrets.GITHUB_TOKEN }}
          password: ${{ secrets.GHCR_PAT }}        # token is stored in github secrets
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          load: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar_system:${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Testing the Image
        run: |
          docker images
          docker container rm -f solar-system-app
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            ${{ vars.DOCKERHUB_USERNAME }}/solar_system:${{ github.run_id }}
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo "Testing image URL using wget"
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Docker Push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: 
            |
            ${{ vars.DOCKERHUB_USERNAME }}/solar_system:${{ github.run_id }}
            ghcr.io/${{ github.repository_owner }}/solar_system:${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dev_deploy:
    name: Deploy in K8s Dev Environment
    runs-on: self-hosted
    needs: containerization
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.29.15"

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Check kubectl version and nodes
        run: |
          kubectl get nodes
          kubectl version

      - name: Saving Ingress IP as Variable
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> "$GITHUB_ENV"

      - name: Replace Tokens in manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar_system:${{ github.run_id }}
          INGRESS_IP: ${{ env.INGRESS_IP }}
          
      - name: Create MONGODB secret
        env:
          MONGO_URI: ${{ secrets.MONGO_URI_SECRET }}
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds --from-literal=MONGO_URI="$MONGO_URI" --save-config --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Check files
        run: |
          cat kubernetes/development/*.yaml

      - name: Deploy in development environment
        run: kubectl apply -f kubernetes/development